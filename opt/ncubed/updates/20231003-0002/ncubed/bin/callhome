#!/bin/bash
##################################################################################
# VARS
##################################################################################
ATTESTATION_SERVER="ncubed-das.westeurope.cloudapp.azure.com"
#ATTESTATION_SERVER="attestation.infra.ncubed.io"
WG_CONFIG_FILE="/etc/wireguard/wg0.conf"
WG_PRIVATE_KEY_FILE=/etc/wireguard/$HOSTNAME.private.key
WG_PUBLIC_KEY_FILE=/etc/wireguard/$HOSTNAME.public.key

##################################################################################
# elevate
##################################################################################
[ "$UID" -eq 0 ] || exec sudo bash "$0" "$@"

cleanup() {
    # kill all processes whose parent is this process
    pkill -P $$
}

for sig in INT QUIT HUP TERM; do
  trap "
    cleanup
    trap - $sig EXIT
    kill -s $sig "'"$$"' "$sig"
done
trap cleanup EXIT

##################################################################################
printf "setting up wireguard\n"
##################################################################################
/opt/ncubed/bin/led blue
if [ -f "$WG_PUBLIC_KEY_FILE" ]; then
  printf "using existing key\n"
else
  printf "Generating keys\n"
  wg genkey | tee $WG_PRIVATE_KEY_FILE | wg pubkey > $WG_PUBLIC_KEY_FILE
  chmod 600 $WG_PRIVATE_KEY_FILE $WG_PUBLIC_KEY_FILE
fi

servicetag=$(dmidecode -s system-serial-number)
pub_key=$(<$WG_PUBLIC_KEY_FILE)
message=$(cat  << EOF
{
  "asset_tag": "$servicetag",
  "client_pub_key": "$pub_key"
}
EOF
)

s=1
fn_callhome () {

  /opt/ncubed/bin/led blue

  ##################################################################################
  printf "register with attestation server\n"
  ##################################################################################
  printf "send public key to attestation server\n"
  cat $WG_PUBLIC_KEY_FILE


  reply=$(curl -s -X POST "https://$ATTESTATION_SERVER/api/v1/clientapi/register" \
                -w '%{http_code}' \
                -H "Content-Type: application/json" \
                -d "$message" )

  ##################################################################################
  # On successfull response write wireguard config
  ##################################################################################
  if [ $(echo $reply | cut -d " " -f2) == 200 ]; then    printf "\nreply: $reply\n"
    reply=$(echo $reply | cut -d " " -f1)
    DEVICEID=$(echo $reply| jq -j ".result.device_id")
    WG_ENDPOINT=$(echo $reply| jq -j ".result.orchestration_server")
    WG_SERVER_PUBLIC_KEY_FILE=$(echo $reply| jq -j ".result.server_pub_key")

    printf "
    ##########################################################################################################
    DEVICEID:                   $DEVICEID
    WG_ENDPOINT:                        $WG_ENDPOINT
    WG_SERVER_PUBLIC_KEY_FILE:  $WG_SERVER_PUBLIC_KEY_FILE
    ###########################################################################################################

    "

    IPV4_PREFIX="100.71"
    IPV6_PREFIX="fd71"
    IPV4=$IPV4_PREFIX.$((DEVICEID>>8&255)).$((DEVICEID&255))/32
    IPV6=$IPV6_PREFIX::$((DEVICEID))/128

    printf "writing wireguard config to $WG_CONFIG_FILE\n"

    printf "
    [Interface]
    Address = $IPV4, $IPV6
    PrivateKey = $(<$WG_PRIVATE_KEY_FILE)

    [Peer]
    PublicKey = $WG_SERVER_PUBLIC_KEY_FILE
    AllowedIPs = $IPV4_PREFIX.0.0, $IPV6_PREFIX::0
    Endpoint = $WG_ENDPOINT
    PersistentKeepalive = 20
    " > $WG_CONFIG_FILE
    ##################################################################################
    # (re)start wg-quick service en check for handshake
    ##################################################################################
    printf "starting wireguard\n"
    systemctl enable --now wg-quick@wg0
    systemctl restart wg-quick@wg0
    return 1
  else
    if [ $s -lt 300 ] ; then
      printf "Backing off for $s seconds\n"
      s=$(($s*2))
    fi
    printf "unexpected reply: $reply\n"
    /opt/ncubed/bin/led blink red & ledpid=$!
    sleep $s
    kill $ledpid
  fi
}

fn_check_connected () {
  printf "checking conection\n"
  if $(wg show interfaces | grep wg0 -q); then
    if $(wg show wg0 | grep -q handshake); then
      # reset callhome backdown timer
      s=1
      firewall-cmd --zone=MGMT --change-interface=wg0
      /opt/ncubed/bin/led purple
      while [ `expr $(date +%s) - $(wg show wg0 latest-handshakes | cut -f2)` -le 180 ]
      do
        sleep 10
      done
    fi
  fi
  if $(systemctl list-units --full -all | grep -Fq wg-quick@wg0.service); then
    systemctl restart wg-quick@wg0.service
    printf "restarted:  wg-quick@wg0.service"
    return 0
  fi
  printf "Unable to contact orchestration server"
  return 1
}

while :
do
  if systemctl is-active network-online.target --quiet ;then
    fn_check_connected || fn_callhome
  else
    /opt/ncubed/bin/led blink orange & ledpid=$!
    sleep 5
    kill $ledpid
  fi
done
